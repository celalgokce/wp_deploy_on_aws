apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-07-13T20:26:23Z"
    generateName: wordpress-648bf68f75-
    labels:
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/name: wordpress
      pod-template-hash: 648bf68f75
    name: wordpress-648bf68f75-n8ghv
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: wordpress-648bf68f75
      uid: e62a5e19-6015-4aef-b8dd-084a20791d95
    resourceVersion: "553095"
    uid: 4a45a406-c347-4807-8b7a-3e8e2af5f7c6
  spec:
    containers:
    - env:
      - name: WORDPRESS_DB_HOST
        value: wordpress-mysql
      - name: WORDPRESS_DB_USER
        valueFrom:
          secretKeyRef:
            key: db_user
            name: wordpress-secret
      - name: WORDPRESS_DB_PASSWORD
        valueFrom:
          secretKeyRef:
            key: db_password
            name: wordpress-secret
      - name: WORDPRESS_DB_NAME
        valueFrom:
          secretKeyRef:
            key: db_name
            name: wordpress-secret
      image: wordpress:6.4-apache
      imagePullPolicy: IfNotPresent
      name: wordpress
      ports:
      - containerPort: 80
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 250m
          memory: 256Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ntsww
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-92-33.eu-central-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-ntsww
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:25Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:23Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:25Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:25Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e8b375694d8105b98d678cc663c39199cf2ee6d418f18dfd76e8489974d7f929
      image: docker.io/library/wordpress:6.4-apache
      imageID: docker.io/library/wordpress@sha256:8ae66efb09a2cc4f1ce44414c52b0ce4198c1f8ed338a6f51910bc09cd7d8bbb
      lastState: {}
      name: wordpress
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-13T20:26:24Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ntsww
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 192.168.92.33
    hostIPs:
    - ip: 192.168.92.33
    phase: Running
    podIP: 192.168.78.101
    podIPs:
    - ip: 192.168.78.101
    qosClass: Burstable
    startTime: "2025-07-13T20:26:23Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/configuration: abf9f9f564058b8c2a21ad6f73c7b990abdb81df74c87a85b4f59c5fced20a70
    creationTimestamp: "2025-07-13T20:26:23Z"
    generateName: wordpress-mysql-
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/version: 9.3.0
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: wordpress-mysql-57b9574885
      helm.sh/chart: mysql-13.0.3
      statefulset.kubernetes.io/pod-name: wordpress-mysql-0
    name: wordpress-mysql-0
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: wordpress-mysql
      uid: aaadc052-799b-4393-88a4-19b83f8a7a7b
    resourceVersion: "553222"
    uid: 3a445521-28bb-468c-a080-5362b5aaf8c6
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/instance: wordpress
                app.kubernetes.io/name: mysql
            topologyKey: kubernetes.io/hostname
          weight: 1
    automountServiceAccountToken: false
    containers:
    - env:
      - name: BITNAMI_DEBUG
        value: "false"
      - name: MYSQL_ROOT_PASSWORD_FILE
        value: /opt/bitnami/mysql/secrets/mysql-root-password
      - name: MYSQL_ENABLE_SSL
        value: "no"
      - name: MYSQL_PORT
        value: "3306"
      - name: MYSQL_DATABASE
        value: wordpress
      image: docker.io/bitnami/mysql:9.3.0-debian-12-r3
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /bin/bash
          - -ec
          - |
            password_aux="${MYSQL_ROOT_PASSWORD:-}"
            if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
            fi
            mysqladmin status -uroot -p"${password_aux}"
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: mysql
      ports:
      - containerPort: 3306
        name: mysql
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /bin/bash
          - -ec
          - |
            password_aux="${MYSQL_ROOT_PASSWORD:-}"
            if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
            fi
            mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          cpu: 750m
          ephemeral-storage: 2Gi
          memory: 768Mi
        requests:
          cpu: 500m
          ephemeral-storage: 50Mi
          memory: 512Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      startupProbe:
        exec:
          command:
          - /bin/bash
          - -ec
          - |
            password_aux="${MYSQL_ROOT_PASSWORD:-}"
            if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
            fi
            mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
        failureThreshold: 10
        initialDelaySeconds: 15
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /bitnami/mysql
        name: data
      - mountPath: /tmp
        name: empty-dir
        subPath: tmp-dir
      - mountPath: /opt/bitnami/mysql/conf
        name: empty-dir
        subPath: app-conf-dir
      - mountPath: /opt/bitnami/mysql/tmp
        name: empty-dir
        subPath: app-tmp-dir
      - mountPath: /opt/bitnami/mysql/logs
        name: empty-dir
        subPath: app-logs-dir
      - mountPath: /opt/bitnami/mysql/conf/my.cnf
        name: config
        subPath: my.cnf
      - mountPath: /opt/bitnami/mysql/secrets/
        name: mysql-credentials
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostname: wordpress-mysql-0
    initContainers:
    - args:
      - -ec
      - |
        #!/bin/bash

        . /opt/bitnami/scripts/libfs.sh
        # We copy the logs folder because it has symlinks to stdout and stderr
        if ! is_dir_empty /opt/bitnami/mysql/logs; then
          cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
        fi
      command:
      - /bin/bash
      image: docker.io/bitnami/mysql:9.3.0-debian-12-r3
      imagePullPolicy: IfNotPresent
      name: preserve-logs-symlinks
      resources:
        limits:
          cpu: 750m
          ephemeral-storage: 2Gi
          memory: 768Mi
        requests:
          cpu: 500m
          ephemeral-storage: 50Mi
          memory: 512Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /emptydir
        name: empty-dir
    nodeName: ip-192-168-92-33.eu-central-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1001
      fsGroupChangePolicy: Always
    serviceAccount: wordpress-mysql
    serviceAccountName: wordpress-mysql
    subdomain: wordpress-mysql-headless
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: data
      persistentVolumeClaim:
        claimName: data-wordpress-mysql-0
    - configMap:
        defaultMode: 420
        name: wordpress-mysql
      name: config
    - name: mysql-credentials
      secret:
        defaultMode: 420
        items:
        - key: mysql-root-password
          path: mysql-root-password
        - key: mysql-password
          path: mysql-password
        secretName: wordpress-mysql
    - emptyDir: {}
      name: empty-dir
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:34Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:53Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:53Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-13T20:26:23Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bc345e434d6499b7e2d929aba52e580a22135cb56312adc7349cfd9141082607
      image: docker.io/bitnami/mysql:9.3.0-debian-12-r3
      imageID: docker.io/bitnami/mysql@sha256:a4b7713e46d8feafbc15887db6273b5ff369a49e1b8c77bc746dd8cb963b0231
      lastState: {}
      name: mysql
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-13T20:26:34Z"
      volumeMounts:
      - mountPath: /bitnami/mysql
        name: data
      - mountPath: /tmp
        name: empty-dir
      - mountPath: /opt/bitnami/mysql/conf
        name: empty-dir
      - mountPath: /opt/bitnami/mysql/tmp
        name: empty-dir
      - mountPath: /opt/bitnami/mysql/logs
        name: empty-dir
      - mountPath: /opt/bitnami/mysql/conf/my.cnf
        name: config
      - mountPath: /opt/bitnami/mysql/secrets/
        name: mysql-credentials
    hostIP: 192.168.92.33
    hostIPs:
    - ip: 192.168.92.33
    initContainerStatuses:
    - containerID: containerd://f8edd1ae281f241f22f21beb563f63d89bb904b9a4b20bee85a0afb2ba2a3fd8
      image: docker.io/bitnami/mysql:9.3.0-debian-12-r3
      imageID: docker.io/bitnami/mysql@sha256:a4b7713e46d8feafbc15887db6273b5ff369a49e1b8c77bc746dd8cb963b0231
      lastState: {}
      name: preserve-logs-symlinks
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://f8edd1ae281f241f22f21beb563f63d89bb904b9a4b20bee85a0afb2ba2a3fd8
          exitCode: 0
          finishedAt: "2025-07-13T20:26:33Z"
          reason: Completed
          startedAt: "2025-07-13T20:26:33Z"
      volumeMounts:
      - mountPath: /emptydir
        name: empty-dir
    phase: Running
    podIP: 192.168.69.80
    podIPs:
    - ip: 192.168.69.80
    qosClass: Burstable
    startTime: "2025-07-13T20:26:23Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-11T12:51:10Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "198"
    uid: 3402384c-d19c-4d79-85f0-3dd6d4a85a05
  spec:
    clusterIP: 10.100.0.1
    clusterIPs:
    - 10.100.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: wordpress
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-07-13T20:26:23Z"
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/version: 9.3.0
      helm.sh/chart: mysql-13.0.3
    name: wordpress-mysql
    namespace: default
    resourceVersion: "553055"
    uid: 9742c3f0-e8c4-4d53-bd4d-ee8583b0e9ef
  spec:
    clusterIP: 10.100.189.110
    clusterIPs:
    - 10.100.189.110
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
    selector:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: wordpress
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-07-13T20:26:23Z"
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/version: 9.3.0
      helm.sh/chart: mysql-13.0.3
    name: wordpress-mysql-headless
    namespace: default
    resourceVersion: "553047"
    uid: 0ee9bd17-9996-4467-80af-6db80852bd53
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
    publishNotReadyAddresses: true
    selector:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/name: mysql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: wordpress
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-07-13T20:26:23Z"
    finalizers:
    - service.kubernetes.io/load-balancer-cleanup
    labels:
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: wordpress
      app.kubernetes.io/version: "6.4"
      helm.sh/chart: wordpress-0.1.0
    name: wordpress-service
    namespace: default
    resourceVersion: "553107"
    uid: 418c74cb-570a-4b74-ae4c-e951c0845736
  spec:
    allocateLoadBalancerNodePorts: true
    clusterIP: 10.100.122.246
    clusterIPs:
    - 10.100.122.246
    externalTrafficPolicy: Cluster
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: http
      nodePort: 30943
      port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/name: wordpress
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer:
      ingress:
      - hostname: a418c74cb570a4b74ae4ce951c084573-116491795.eu-central-1.elb.amazonaws.com
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: wordpress
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-07-13T20:26:23Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: wordpress
      app.kubernetes.io/version: "6.4"
      helm.sh/chart: wordpress-0.1.0
    name: wordpress
    namespace: default
    resourceVersion: "553099"
    uid: ec668909-5db4-46e6-96b8-b5b92d534603
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: wordpress
        app.kubernetes.io/name: wordpress
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: wordpress
          app.kubernetes.io/name: wordpress
      spec:
        containers:
        - env:
          - name: WORDPRESS_DB_HOST
            value: wordpress-mysql
          - name: WORDPRESS_DB_USER
            valueFrom:
              secretKeyRef:
                key: db_user
                name: wordpress-secret
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: wordpress-secret
          - name: WORDPRESS_DB_NAME
            valueFrom:
              secretKeyRef:
                key: db_name
                name: wordpress-secret
          image: wordpress:6.4-apache
          imagePullPolicy: IfNotPresent
          name: wordpress
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-13T20:26:25Z"
      lastUpdateTime: "2025-07-13T20:26:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-13T20:26:23Z"
      lastUpdateTime: "2025-07-13T20:26:25Z"
      message: ReplicaSet "wordpress-648bf68f75" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: wordpress
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-07-13T20:26:23Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/name: wordpress
      pod-template-hash: 648bf68f75
    name: wordpress-648bf68f75
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: wordpress
      uid: ec668909-5db4-46e6-96b8-b5b92d534603
    resourceVersion: "553098"
    uid: e62a5e19-6015-4aef-b8dd-084a20791d95
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: wordpress
        app.kubernetes.io/name: wordpress
        pod-template-hash: 648bf68f75
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: wordpress
          app.kubernetes.io/name: wordpress
          pod-template-hash: 648bf68f75
      spec:
        containers:
        - env:
          - name: WORDPRESS_DB_HOST
            value: wordpress-mysql
          - name: WORDPRESS_DB_USER
            valueFrom:
              secretKeyRef:
                key: db_user
                name: wordpress-secret
          - name: WORDPRESS_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: wordpress-secret
          - name: WORDPRESS_DB_NAME
            valueFrom:
              secretKeyRef:
                key: db_name
                name: wordpress-secret
          image: wordpress:6.4-apache
          imagePullPolicy: IfNotPresent
          name: wordpress
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      meta.helm.sh/release-name: wordpress
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-07-13T20:26:23Z"
    generation: 1
    labels:
      app.kubernetes.io/component: primary
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/version: 9.3.0
      helm.sh/chart: mysql-13.0.3
    name: wordpress-mysql
    namespace: default
    resourceVersion: "553227"
    uid: aaadc052-799b-4393-88a4-19b83f8a7a7b
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: primary
        app.kubernetes.io/instance: wordpress
        app.kubernetes.io/name: mysql
        app.kubernetes.io/part-of: mysql
    serviceName: wordpress-mysql-headless
    template:
      metadata:
        annotations:
          checksum/configuration: abf9f9f564058b8c2a21ad6f73c7b990abdb81df74c87a85b4f59c5fced20a70
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: primary
          app.kubernetes.io/instance: wordpress
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: mysql
          app.kubernetes.io/part-of: mysql
          app.kubernetes.io/version: 9.3.0
          helm.sh/chart: mysql-13.0.3
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: wordpress
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        automountServiceAccountToken: false
        containers:
        - env:
          - name: BITNAMI_DEBUG
            value: "false"
          - name: MYSQL_ROOT_PASSWORD_FILE
            value: /opt/bitnami/mysql/secrets/mysql-root-password
          - name: MYSQL_ENABLE_SSL
            value: "no"
          - name: MYSQL_PORT
            value: "3306"
          - name: MYSQL_DATABASE
            value: wordpress
          image: docker.io/bitnami/mysql:9.3.0-debian-12-r3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                password_aux="${MYSQL_ROOT_PASSWORD:-}"
                if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                    password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                fi
                mysqladmin status -uroot -p"${password_aux}"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
            name: mysql
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                password_aux="${MYSQL_ROOT_PASSWORD:-}"
                if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                    password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                fi
                mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                password_aux="${MYSQL_ROOT_PASSWORD:-}"
                if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                    password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                fi
                mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /bitnami/mysql
            name: data
          - mountPath: /tmp
            name: empty-dir
            subPath: tmp-dir
          - mountPath: /opt/bitnami/mysql/conf
            name: empty-dir
            subPath: app-conf-dir
          - mountPath: /opt/bitnami/mysql/tmp
            name: empty-dir
            subPath: app-tmp-dir
          - mountPath: /opt/bitnami/mysql/logs
            name: empty-dir
            subPath: app-logs-dir
          - mountPath: /opt/bitnami/mysql/conf/my.cnf
            name: config
            subPath: my.cnf
          - mountPath: /opt/bitnami/mysql/secrets/
            name: mysql-credentials
        dnsPolicy: ClusterFirst
        initContainers:
        - args:
          - -ec
          - |
            #!/bin/bash

            . /opt/bitnami/scripts/libfs.sh
            # We copy the logs folder because it has symlinks to stdout and stderr
            if ! is_dir_empty /opt/bitnami/mysql/logs; then
              cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
            fi
          command:
          - /bin/bash
          image: docker.io/bitnami/mysql:9.3.0-debian-12-r3
          imagePullPolicy: IfNotPresent
          name: preserve-logs-symlinks
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /emptydir
            name: empty-dir
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1001
          fsGroupChangePolicy: Always
        serviceAccount: wordpress-mysql
        serviceAccountName: wordpress-mysql
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: wordpress-mysql
          name: config
        - name: mysql-credentials
          secret:
            defaultMode: 420
            items:
            - key: mysql-root-password
              path: mysql-root-password
            - key: mysql-password
              path: mysql-password
            secretName: wordpress-mysql
        - emptyDir: {}
          name: empty-dir
    updateStrategy:
      type: RollingUpdate
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: primary
          app.kubernetes.io/instance: wordpress
          app.kubernetes.io/name: mysql
        name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
        volumeMode: Filesystem
      status:
        phase: Pending
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: wordpress-mysql-57b9574885
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: wordpress-mysql-57b9574885
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
